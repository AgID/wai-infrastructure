# {{ ansible_managed }}
# This deployment is based on a Redis StatefulSet and a Redis Sentinel DaemonSet
# When the StatefulSet starts the 0-index POD assumes to be the redis master if no redis sentinel is started
# If the 0-index POD finds a master then it will be a slave node otherwise starts as master one. The StatefulSet has an initContainers that waits for the sentinel instance just if it is not the 0-index container.
# The sentinel DaemonSet  is configured to monitor the 0-index POD, ingestion-redis-0, or the master returned by the get-master-addr-by-name ingestion-redis-master to the ingestion-redis-sentinel service
# The DaemonSet has an initContainer that wait for the master node using a redis-cli ping command
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: ingestion-redis-node
  namespace: {{ item }}
spec:
  replicas: 3
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app: ingestion-redis-node
  serviceName: ingestion-redis
  template:
    metadata:
      labels:
        app: ingestion-redis-node
    spec:
      initContainers:
        - name: wait-for-sentinel
          image: redis:{{ redis_image_version }}
          resources:
            limits:
              cpu: "0.10"
              memory: "64Mi"
          command: ["sh", "-c"]
          args: [". /read-only/start-init-container.sh"]
          volumeMounts:
            - name: init-container-entrypoint
              mountPath: /read-only
      containers:
        - image: redis:{{ redis_image_version }}
          name: ingestion-redis
          resources:
            limits:
              cpu: "1"
              memory: "1Gi"
          command: ["/bin/sh", "-c"]
          args: [". /read-only/start-redis.sh"]
          ports:
            - containerPort: 6379
              name: redis-port
          livenessProbe:
            exec:
              command: ["/bin/sh", "-i", "-c", test \"$(redis-cli -h 127.0.0.1 PING)\" == \"PONG\""]
            initialDelaySeconds: 5
            periodSeconds: 5
          readinessProbe:
            exec:
              command: ["/bin/sh", "-i", "-c", test \"$(redis-cli -h 127.0.0.1 PING)\" == \"PONG\""]
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 10
          volumeMounts:
            - name: redis-entrypoint
              mountPath: /read-only
      volumes:
        - name: redis-entrypoint
          configMap:
            name: redis-ms-init-script
        - name: init-container-entrypoint
          configMap:
            name: redis-ms-init-container
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: redis-sentinel-daemonset
  namespace: {{ item }}
spec:
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app: redis-sentinel-daemonset
  template:
    metadata:
      labels:
        app: redis-sentinel-daemonset
    spec:
      initContainers:
        - name: wait-for-redis-master
          image: redis:{{ redis_image_version }}
          resources:
            limits:
              cpu: "0.10"
              memory: "64Mi"
          command: ["sh", "-c"]
          args: [". /read-only/start-sentinel-init-container.sh"]
          volumeMounts:
            - name: redis-sentinel-init-container
              mountPath: /read-only
      containers:
        - image: redis:{{ redis_image_version }}
          name: ingestion-redis-sentinel
          resources:
            limits:
              cpu: "0.25"
              memory: "128Mi"
          command: ["/bin/sh", "-c"]
          args: [". /read-only/start-redis-sentinel.sh"]
          ports:
            - containerPort: 26379
              name: sentinel-port
          livenessProbe:
            exec:
              command: ["/bin/sh", "-i", "-c", test \"$(redis-cli -h 127.0.0.1 PING)\" == \"PONG\""]
            initialDelaySeconds: 5
            periodSeconds: 5
          readinessProbe:
            exec:
              command: ["/bin/sh", "-i", "-c", test \"$(redis-cli -h 127.0.0.1 PING)\" == \"PONG\""]
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 10
          volumeMounts:
            - name: redis-sentinel-entrypoint
              mountPath: /read-only
      volumes:
        - name: redis-sentinel-entrypoint
          configMap:
            name: redis-sentinel-init-script
        - name: redis-sentinel-init-container
          configMap:
            name: redis-sentinel-init-container
---
apiVersion: v1
kind: Service
metadata:
  name: redis-headless
  namespace: {{ item }}
spec:
  clusterIP: None
  selector:
    app: ingestion-redis-node
---
apiVersion: v1
kind: Service
metadata:
  name: ingestion-redis-sentinel-service
  namespace: {{ item }}
spec:
  ports:
    - name: sentinel
      protocol: TCP
      port: 26379
  selector:
    app: redis-sentinel-daemonset
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: redis-sentinel-init-container
  namespace: {{ item }}
data:
  start-sentinel-init-container.sh: |-
    #!/bin/sh
    # Waiting for the first PONG
    while [ "$(redis-cli -h redis-headless ping)" != "PONG" ]; do
      echo "Waiting for the first redis node to become available"
      sleep 5
    done
    exit 0
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: redis-ms-init-container
  namespace: {{ item }}
data:
  start-init-container.sh: |-
    #!/bin/sh
    # If I'm not the 0-index node of the StatefulSet wait for Sentinel
    if [ "${HOSTNAME##*-}" != "0" ]; then
        while ["$(echo "SENTINEL get-master-addr-by-name ingestion-redis-master" | redis-cli -h ingestion-redis-sentinel-service -p 26379 | head -n 1)" = "" ];  
        do 
          echo "Waiting for sentinel"
          sleep 5
        done
    fi
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: redis-ms-init-script
  namespace: {{ item }}
data:
  start-redis.sh: |-
    #!/bin/sh
    HOST_ID=${HOSTNAME##*-}
    echo "Starting redis node with id $HOST_ID"
    MASTER_IP=$(echo "SENTINEL get-master-addr-by-name ingestion-redis-master" | redis-cli -h ingestion-redis-sentinel-service -p 26379 | head -n 1)
    # If a master is already registered on redis-sentinel I'm a slave
    if [ "$MASTER_IP" != "" ]; then
      echo "slaveof $MASTER_IP 6379" > /etc/redis.conf
      redis-server /etc/redis.conf
      exit 0
    fi

    # If no master is registered and I'm the first pod in the StatefulSet then I'm the master
    if [ "$HOST_ID" = "0" ] && [ "$MASTER_IP" = "" ]; then
      echo "Starting redis master on node with id $HOST_ID"
      redis-server
      exit 0
    fi  

    # No master nor sentinel found
    echo "Redis sentinel not available"
    exit 1
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: redis-sentinel-init-script
  namespace: {{ item }}
data:
  start-redis-sentinel.sh: |-
    #!/bin/sh
    REDIS_MASTER=""
    while [ "$REDIS_MASTER" = "" ]; do
      echo "Looking for redis master"
      if [ "$(redis-cli -h redis-headless ping)" = "PONG" ]; then
        echo "Redis master found"
        REDIS_MASTER="redis-headless"
      else
        REDIS_MASTER=$(echo "SENTINEL get-master-addr-by-name ingestion-redis-master" | redis-cli -h ingestion-redis-sentinel-service -p 26379 | head -n 1) 
      fi
      sleep 10
    done

    echo "Redis master found at $REDIS_MASTER"

    cat << EOF > /etc/sentinel.conf
    port 26379
    sentinel monitor ingestion-redis-master $REDIS_MASTER 6379 2
    sentinel down-after-milliseconds ingestion-redis-master 5000
    sentinel failover-timeout ingestion-redis-master 60000
    sentinel parallel-syncs ingestion-redis-master 1
    EOF

    redis-server /etc/sentinel.conf --sentinel
    exit 0
